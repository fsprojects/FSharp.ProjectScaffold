// --------------------------------------------------------------------------------------
// FAKE build script
// --------------------------------------------------------------------------------------

#r @"packages/FAKE/tools/FakeLib.dll"
#r @"packages/Paket.Core/lib/Paket.Core.dll"
open Fake
open Fake.Git
open Fake.AssemblyInfoFile
open Fake.ReleaseNotesHelper
open Paket
open Paket.PackageResolver
open Paket.Requirements
open System
open System.IO
#if MONO
#else
#load "packages/SourceLink.Fake/Tools/Fake.fsx"
open SourceLink
#endif

// --------------------------------------------------------------------------------------
// START TODO: Provide project-specific details below
// --------------------------------------------------------------------------------------

// Information about the project are used
//  - for version and project name in generated AssemblyInfo file
//  - by the generated NuGet package
//  - to run tests and to publish documentation on GitHub gh-pages
//  - for documentation, you also need to edit info in "docs/tools/generate.fsx"

// The name of the project
// (used by attributes in AssemblyInfo, name of a NuGet package and directory in 'src')
let project = "##ProjectName##"

// Short summary of the project
// (used as description in AssemblyInfo and as a short summary for NuGet package)
let summary = "##Summary##"

// Longer description of the project
// (used as a description for NuGet package; line breaks are automatically cleaned up)
let description = "##Description##"

// List of author names (for NuGet package)
let authors = [ "##Author##" ]

// Tags for your project (for NuGet package)
let tags = "##Tags##"

// File system information 
let solutionFile  = "##ProjectName##.sln"

// Pattern specifying assemblies to be tested using NUnit
let testAssemblies = "tests/**/bin/Release/*Tests*.dll"

// Git configuration (used for publishing documentation in gh-pages branch)
// The profile where the project is posted
let gitOwner = "##GitHome##" 
let gitHome = "https://github.com/" + gitOwner

// The name of the project on GitHub
let gitName = "##GitName##"

// The url for the raw files hosted
let gitRaw = environVarOrDefault "gitRaw" "https://raw.github.com/##GitHome##"

// --------------------------------------------------------------------------------------
// END TODO: The rest of the file includes standard build steps
// --------------------------------------------------------------------------------------

// Read additional information from the release notes document
let release = LoadReleaseNotes "RELEASE_NOTES.md"

let genFSAssemblyInfo (projectPath) =
    let projectName = System.IO.Path.GetFileNameWithoutExtension(projectPath)
    let basePath = "src/" + projectName
    let fileName = basePath + "/AssemblyInfo.fs"
    CreateFSharpAssemblyInfo fileName
      [ Attribute.Title (projectName)
        Attribute.Product project
        Attribute.Description summary
        Attribute.Version release.AssemblyVersion
        Attribute.FileVersion release.AssemblyVersion ]

let genCSAssemblyInfo (projectPath) =
    let projectName = System.IO.Path.GetFileNameWithoutExtension(projectPath)
    let basePath = "src/" + projectName + "/Properties"
    let fileName = basePath + "/AssemblyInfo.cs"
    CreateCSharpAssemblyInfo fileName
      [ Attribute.Title (projectName)
        Attribute.Product project
        Attribute.Description summary
        Attribute.Version release.AssemblyVersion
        Attribute.FileVersion release.AssemblyVersion ]

// Generate assembly info files with the right version & up-to-date information
Target "AssemblyInfo" (fun _ ->
  let fsProjs =  !! "src/**/*.fsproj"
  let csProjs = !! "src/**/*.csproj"
  fsProjs |> Seq.iter genFSAssemblyInfo
  csProjs |> Seq.iter genCSAssemblyInfo
)

// Copies binaries from default VS location to exepcted bin folder
// But keeps a subdirectory structure for each project in the 
// src folder to support multiple project outputs
Target "CopyBinaries" (fun _ ->
    directoryInfo "src" 
    |> subDirectories 
    |> Array.map (fun d -> (d.Name,  sprintf "%s/Bin/Release" d.FullName)) 
    |> Array.iter (fun (n, p) -> CopyDir (sprintf "bin/%s" n) p (fun _ -> true)) 
)

// --------------------------------------------------------------------------------------
// Clean build results

Target "Clean" (fun _ ->
    CleanDirs ["bin"; "temp"]
)

Target "CleanDocs" (fun _ ->
    CleanDirs ["docs/output"]
)

// --------------------------------------------------------------------------------------
// Build library & test project

Target "Build" (fun _ ->
    !! solutionFile
    |> MSBuildRelease "" "Rebuild"
    |> ignore
)

// --------------------------------------------------------------------------------------
// Run the unit tests using test runner

Target "RunTests" (fun _ ->
    !! testAssemblies
    |> NUnit (fun p ->
        { p with
            DisableShadowCopy = true
            TimeOut = TimeSpan.FromMinutes 20.
            OutputFile = "TestResults.xml" })
)

#if MONO
#else
// --------------------------------------------------------------------------------------
// SourceLink allows Source Indexing on the PDB generated by the compiler, this allows
// the ability to step through the source code of external libraries https://github.com/ctaggart/SourceLink

Target "SourceLink" (fun _ ->
    let baseUrl = sprintf "%s/%s/{0}/%%var2%%" gitRaw (project.ToLower())
    use repo = new GitRepo(__SOURCE_DIRECTORY__)
    !! "src/**/*.fsproj"
    |> Seq.iter (fun f ->
        let proj = VsProj.LoadRelease f
        logfn "source linking %s" proj.OutputFilePdb
        let files = proj.Compiles -- "**/AssemblyInfo.fs"
        repo.VerifyChecksums files
        proj.VerifyPdbChecksums files
        proj.CreateSrcSrv baseUrl repo.Revision (repo.Paths files)
        Pdbstr.exec proj.OutputFilePdb proj.OutputFilePdbSrcSrv
    )
)
#endif

// --------------------------------------------------------------------------------------
// Build a NuGet package

type FrameworkVersion (projectFwVersion:string) =
    let nugetFwVersion = projectFwVersion.Replace("v","net")
    member x.NugetFwVersion = nugetFwVersion

type Output =
| Exe 
| Library

let dirI = 
    directoryInfo ((__SOURCE_DIRECTORY__ @@ "bin") @@ "Tu.Tu")

let getProjectFile (d:IO.DirectoryInfo) =
    let dirI = directoryInfo ((__SOURCE_DIRECTORY__ @@ "src") @@ d.Name)
    if not dirI.Exists then failwith (sprintf "%s does not exist" dirI.FullName )
    let pfile =  match dirI.GetFiles("*.?sproj") with
                 | [|unique|] -> ProjectFile.Load unique.FullName
                 | [||]       -> failwith (sprintf "No project files found in %s" d.FullName)
                 | many       -> failwith (sprintf "More than one project file was found in %s: %A" d.FullName many)

    match pfile with
    | Some(p) -> p
    | None    -> failwith "Unable to load project file"
    
let getNodes (p:ProjectFile) name =
    let query = (sprintf "//ns:%s" name)
    let nodes = p.Document.SelectNodes((sprintf "//ns:%s" name), p.Namespaces)    
    match nodes.Count with
    | 0 -> None
    | _ -> Some(nodes)

let getNode (p:ProjectFile) name =
    match getNodes p name with
    | None -> failwith (sprintf "%s Not found in project file %s" name p.FileName)
    | Some(n) when n.Count > 1 -> failwith (sprintf "More than one element of %s found in project file %s" name p.FileName)
    | Some(n) -> n.[0]

let getOutputType (d:IO.DirectoryInfo) =
    let projFile = getProjectFile  d
    let output = (getNode projFile "OutputType").InnerText    
    let fw = (getNode projFile "TargetFrameworkVersion").InnerText   
    match output with
    | "Exe" -> (Exe, (new FrameworkVersion(fw)))
    | _     -> (Library, (new FrameworkVersion(fw)))

let getFilenamesForLibraryOutput (d:IO.DirectoryInfo) =
    [d.FullName @@ (sprintf "%s.dll" d.Name)
     d.FullName @@ (sprintf "%s.pdb" d.Name)] 
    
let getFilenamesForExeOutput (d:IO.DirectoryInfo) =
    d.GetFiles("*", IO.SearchOption.AllDirectories) 
    |> Array.map (fun f -> f.FullName) 
    |> Array.toList 

let getFilenames (d:IO.DirectoryInfo) =
    let (output, fwVersion) = getOutputType d
    let files = match output with 
                | Exe     -> getFilenamesForExeOutput d
                | Library -> getFilenamesForLibraryOutput d
    files |> List.map(fun f -> (f, Some("lib" @@ fwVersion.NugetFwVersion), None))

let getAllPackages () =
    let dep = (DependenciesFile.ReadFromFile (__SOURCE_DIRECTORY__ @@ "paket.dependencies"))
    let lock = (LockFileParser.Parse (IO.File.ReadAllLines (__SOURCE_DIRECTORY__ @@ "paket.lock")))
    (dep.Packages, lock.Packages)

let getReferencedPackageNamesFromProject projectRefFile =
    IO.File.ReadAllLines projectRefFile

let getCurrentlyInstalledVersion p (resolved:ResolvedPackage List) =
    (resolved |> List.find (fun rp -> rp.Name = p)).Version

let getVersionRequirement (p:PackageRequirement) (resolved:ResolvedPackage List) =
    match p.VersionRequirement.Range with
    | Minimum(semver) when (semver.ToString()) = "0" -> Minimum(getCurrentlyInstalledVersion p.Name resolved)
    | version                                        -> version

let getReferencedPackagesFromProject projectRefFile =
    let referencedPackages = getReferencedPackageNamesFromProject projectRefFile
    let (dep, lock) = getAllPackages  () 
    dep 
    |> List.filter (fun p -> referencedPackages |> Array.exists (fun r -> p.Name = r))
    |> List.map (fun p -> let version = getVersionRequirement p lock |> NugetVersionRangeParser.format
                          (p.Name, version))

let getInterProjectDependencies (d:IO.DirectoryInfo) =
    let projFile = getProjectFile d   
    match getNodes projFile "ProjectReference" with
    | None -> []
    | Some(nodes) -> [for n in nodes -> (n.SelectSingleNode("ns:Name", projFile.Namespaces).InnerText, release.NugetVersion)] 

let getDependencies (d:IO.DirectoryInfo) =
    match getOutputType d with
    | Exe,_  -> []
    |  _ ,_  -> let projectSourceDir = (__SOURCE_DIRECTORY__ @@ "src") @@ d.Name
                let referencesFile = projectSourceDir @@ "paket.references"
                let externalDependencies = match fileExists referencesFile with
                                           | false -> []
                                           | true  -> getReferencedPackagesFromProject referencesFile
                (getInterProjectDependencies d) @ externalDependencies
    
Target "NuGet" (fun _ ->
    directoryInfo "bin" 
    |> subDirectories
    |> Array.iter (fun d ->
        NuGet (fun p ->
            { p with
                Authors = authors
                Project = d.Name
                Summary = summary
                Description = description
                Version = release.NugetVersion
                ReleaseNotes = String.Join(Environment.NewLine, release.Notes)
                Tags = tags
                Files = getFilenames d
                OutputPath = "bin" @@ d.Name
                AccessKey = getBuildParamOrDefault "nugetkey" ""
                Publish = hasBuildParam "nugetkey"
                Dependencies = getDependencies d })
            ("nuget/" + project + ".nuspec")
        )
)

// --------------------------------------------------------------------------------------
// Generate the documentation

Target "GenerateReferenceDocs" (fun _ ->
    if not <| executeFSIWithArgs "docs/tools" "generate.fsx" ["--define:RELEASE"; "--define:REFERENCE"] [] then
      failwith "generating reference documentation failed"
)

let generateHelp fail =
    if executeFSIWithArgs "docs/tools" "generate.fsx" ["--define:RELEASE"; "--define:HELP"] [] then
        traceImportant "Help generated"
    else
        if fail then
            failwith "generating help documentation failed"
        else
            traceImportant "generating help documentation failed"
    

Target "GenerateHelp" (fun _ ->
    DeleteFile "docs/content/release-notes.md"    
    CopyFile "docs/content/" "RELEASE_NOTES.md"
    Rename "docs/content/release-notes.md" "docs/content/RELEASE_NOTES.md"

    DeleteFile "docs/content/license.md"
    CopyFile "docs/content/" "LICENSE.txt"
    Rename "docs/content/license.md" "docs/content/LICENSE.txt"

    generateHelp true
)


Target "KeepRunning" (fun _ ->    
    use watcher = new FileSystemWatcher(DirectoryInfo("docs/content").FullName,"*.*")
    watcher.EnableRaisingEvents <- true
    watcher.Changed.Add(fun e -> generateHelp false)
    watcher.Created.Add(fun e -> generateHelp false)
    watcher.Renamed.Add(fun e -> generateHelp false)
    watcher.Deleted.Add(fun e -> generateHelp false)

    traceImportant "Waiting for help edits. Press any key to stop."

    System.Console.ReadKey() |> ignore

    watcher.EnableRaisingEvents <- false
    watcher.Dispose()
)

Target "GenerateDocs" DoNothing

// --------------------------------------------------------------------------------------
// Release Scripts

Target "ReleaseDocs" (fun _ ->
    let tempDocsDir = "temp/gh-pages"
    CleanDir tempDocsDir
    Repository.cloneSingleBranch "" (gitHome + "/" + gitName + ".git") "gh-pages" tempDocsDir

    fullclean tempDocsDir
    CopyRecursive "docs/output" tempDocsDir true |> tracefn "%A"
    StageAll tempDocsDir
    Git.Commit.Commit tempDocsDir (sprintf "Update generated documentation for version %s" release.NugetVersion)
    Branches.push tempDocsDir
)

#load "paket-files/fsharp/FAKE/modules/Octokit/Octokit.fsx"
open Octokit

Target "Release" (fun _ ->
    StageAll ""
    Git.Commit.Commit "" (sprintf "Bump version to %s" release.NugetVersion)
    Branches.push ""

    Branches.tag "" release.NugetVersion
    Branches.pushTag "" "origin" release.NugetVersion
    
    // release on github
    createClient (getBuildParamOrDefault "github-user" "") (getBuildParamOrDefault "github-pw" "")
    |> createDraft gitOwner gitName release.NugetVersion (release.SemVer.PreRelease <> None) release.Notes 
    // TODO: |> uploadFile "PATH_TO_FILE"    
    |> releaseDraft
    |> Async.RunSynchronously
)

Target "BuildPackage" DoNothing

// --------------------------------------------------------------------------------------
// Run all targets by default. Invoke 'build <Target>' to override

Target "All" DoNothing

"Clean"
  ==> "AssemblyInfo"
  ==> "Build"
  ==> "CopyBinaries"
  ==> "RunTests"
  =?> ("GenerateReferenceDocs",isLocalBuild && not isMono)
  =?> ("GenerateDocs",isLocalBuild && not isMono)
  ==> "All"
  =?> ("ReleaseDocs",isLocalBuild && not isMono)

"All" 
#if MONO
#else
  =?> ("SourceLink", Pdbstr.tryFind().IsSome )
#endif
  ==> "NuGet"
  ==> "BuildPackage"

"CleanDocs"
  ==> "GenerateHelp"
  ==> "GenerateReferenceDocs"
  ==> "GenerateDocs"

"GenerateHelp"
  ==> "KeepRunning"
    
"ReleaseDocs"
  ==> "Release"

"BuildPackage"
  ==> "Release"

RunTargetOrDefault "All"
